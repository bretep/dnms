Implementation

The goal here is to create a few layers that in themselves create something useful

Base parts:
    - Memberlist: our peers on the network to talk to
    - Mapper: responsible for mapping the network based on who is in the memberlist
    - Pinger: ping all peers in the network-- specifically to hit all routes in the mapper

Parts TODO:
    - fault detection: using events from pinger/mapper correlate which links we
        think are having issues
    - aggregation
        -- route around nodes that can't talk to aggregation nodes

General TODO:
    - Metrics
        -- global counters (total)
            - successful/failed pings
            - successful/failed maps
        -- gauges (current count)
            -- current peers
            -- current routes (+ per-state)
            -- current nodes
            -- current edges
        -- some "graph" metrics (connectivity, etc.)
    - Better UI
        -- separate views for graph vs routes etc.
        -- visualization for latency / loss / etc
    - events
        -- updates: node/link on the aggregator
    - IPv6 support (traceroute etc.)
    - memberlist
        -- use the meta field
            - include "role"
            - include http endpoint info (port at least)
    - rename "NetworkLink" -> "NetworkEdge"
    - switch aggregation from pull to push

Metrics to figure out:
    - how many times a route flops over to a new one (route changes)
    - average routes per peer?
    - average latency for a link
        -- diff the times for ICMP between the 2 nodes, keep a rolling average
